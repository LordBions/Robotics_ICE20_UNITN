# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motion/legoTask.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class legoTask(genpy.Message):
  _md5sum = "8a4e5c0c91e8ae65724694327df784ce"
  _type = "motion/legoTask"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 command_id
int32 send_ack
int32 real_robot
int32 w_time
float64 coord_x
float64 coord_y
float64 coord_z
float64 rot_roll
float64 rot_pitch
float64 rot_yaw
float64 gasp_diam
float64 dest_x
float64 dest_y
float64 dest_z
float64 dest_roll
float64 dest_pitch
float64 dest_yaw
float64 ungasp_diam
"""
  __slots__ = ['command_id','send_ack','real_robot','w_time','coord_x','coord_y','coord_z','rot_roll','rot_pitch','rot_yaw','gasp_diam','dest_x','dest_y','dest_z','dest_roll','dest_pitch','dest_yaw','ungasp_diam']
  _slot_types = ['int32','int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command_id,send_ack,real_robot,w_time,coord_x,coord_y,coord_z,rot_roll,rot_pitch,rot_yaw,gasp_diam,dest_x,dest_y,dest_z,dest_roll,dest_pitch,dest_yaw,ungasp_diam

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(legoTask, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command_id is None:
        self.command_id = 0
      if self.send_ack is None:
        self.send_ack = 0
      if self.real_robot is None:
        self.real_robot = 0
      if self.w_time is None:
        self.w_time = 0
      if self.coord_x is None:
        self.coord_x = 0.
      if self.coord_y is None:
        self.coord_y = 0.
      if self.coord_z is None:
        self.coord_z = 0.
      if self.rot_roll is None:
        self.rot_roll = 0.
      if self.rot_pitch is None:
        self.rot_pitch = 0.
      if self.rot_yaw is None:
        self.rot_yaw = 0.
      if self.gasp_diam is None:
        self.gasp_diam = 0.
      if self.dest_x is None:
        self.dest_x = 0.
      if self.dest_y is None:
        self.dest_y = 0.
      if self.dest_z is None:
        self.dest_z = 0.
      if self.dest_roll is None:
        self.dest_roll = 0.
      if self.dest_pitch is None:
        self.dest_pitch = 0.
      if self.dest_yaw is None:
        self.dest_yaw = 0.
      if self.ungasp_diam is None:
        self.ungasp_diam = 0.
    else:
      self.command_id = 0
      self.send_ack = 0
      self.real_robot = 0
      self.w_time = 0
      self.coord_x = 0.
      self.coord_y = 0.
      self.coord_z = 0.
      self.rot_roll = 0.
      self.rot_pitch = 0.
      self.rot_yaw = 0.
      self.gasp_diam = 0.
      self.dest_x = 0.
      self.dest_y = 0.
      self.dest_z = 0.
      self.dest_roll = 0.
      self.dest_pitch = 0.
      self.dest_yaw = 0.
      self.ungasp_diam = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i14d().pack(_x.command_id, _x.send_ack, _x.real_robot, _x.w_time, _x.coord_x, _x.coord_y, _x.coord_z, _x.rot_roll, _x.rot_pitch, _x.rot_yaw, _x.gasp_diam, _x.dest_x, _x.dest_y, _x.dest_z, _x.dest_roll, _x.dest_pitch, _x.dest_yaw, _x.ungasp_diam))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.command_id, _x.send_ack, _x.real_robot, _x.w_time, _x.coord_x, _x.coord_y, _x.coord_z, _x.rot_roll, _x.rot_pitch, _x.rot_yaw, _x.gasp_diam, _x.dest_x, _x.dest_y, _x.dest_z, _x.dest_roll, _x.dest_pitch, _x.dest_yaw, _x.ungasp_diam,) = _get_struct_4i14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i14d().pack(_x.command_id, _x.send_ack, _x.real_robot, _x.w_time, _x.coord_x, _x.coord_y, _x.coord_z, _x.rot_roll, _x.rot_pitch, _x.rot_yaw, _x.gasp_diam, _x.dest_x, _x.dest_y, _x.dest_z, _x.dest_roll, _x.dest_pitch, _x.dest_yaw, _x.ungasp_diam))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.command_id, _x.send_ack, _x.real_robot, _x.w_time, _x.coord_x, _x.coord_y, _x.coord_z, _x.rot_roll, _x.rot_pitch, _x.rot_yaw, _x.gasp_diam, _x.dest_x, _x.dest_y, _x.dest_z, _x.dest_roll, _x.dest_pitch, _x.dest_yaw, _x.ungasp_diam,) = _get_struct_4i14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i14d = None
def _get_struct_4i14d():
    global _struct_4i14d
    if _struct_4i14d is None:
        _struct_4i14d = struct.Struct("<4i14d")
    return _struct_4i14d
