// Generated by gencpp from file motion/eventResult.msg
// DO NOT EDIT!


#ifndef MOTION_MESSAGE_EVENTRESULT_H
#define MOTION_MESSAGE_EVENTRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion
{
template <class ContainerAllocator>
struct eventResult_
{
  typedef eventResult_<ContainerAllocator> Type;

  eventResult_()
    : event_id(0)
    , result_id(0)
    , extra_data(0)  {
    }
  eventResult_(const ContainerAllocator& _alloc)
    : event_id(0)
    , result_id(0)
    , extra_data(0)  {
  (void)_alloc;
    }



   typedef int32_t _event_id_type;
  _event_id_type event_id;

   typedef int32_t _result_id_type;
  _result_id_type result_id;

   typedef int32_t _extra_data_type;
  _extra_data_type extra_data;





  typedef boost::shared_ptr< ::motion::eventResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion::eventResult_<ContainerAllocator> const> ConstPtr;

}; // struct eventResult_

typedef ::motion::eventResult_<std::allocator<void> > eventResult;

typedef boost::shared_ptr< ::motion::eventResult > eventResultPtr;
typedef boost::shared_ptr< ::motion::eventResult const> eventResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion::eventResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion::eventResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion::eventResult_<ContainerAllocator1> & lhs, const ::motion::eventResult_<ContainerAllocator2> & rhs)
{
  return lhs.event_id == rhs.event_id &&
    lhs.result_id == rhs.result_id &&
    lhs.extra_data == rhs.extra_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion::eventResult_<ContainerAllocator1> & lhs, const ::motion::eventResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motion::eventResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion::eventResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion::eventResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion::eventResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion::eventResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion::eventResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion::eventResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd180d3fc58646647eb38b5dc3a7407b";
  }

  static const char* value(const ::motion::eventResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd180d3fc5864664ULL;
  static const uint64_t static_value2 = 0x7eb38b5dc3a7407bULL;
};

template<class ContainerAllocator>
struct DataType< ::motion::eventResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion/eventResult";
  }

  static const char* value(const ::motion::eventResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion::eventResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 event_id\n"
"int32 result_id\n"
"int32 extra_data\n"
;
  }

  static const char* value(const ::motion::eventResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion::eventResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event_id);
      stream.next(m.result_id);
      stream.next(m.extra_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eventResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion::eventResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion::eventResult_<ContainerAllocator>& v)
  {
    s << indent << "event_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_id);
    s << indent << "result_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result_id);
    s << indent << "extra_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.extra_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_MESSAGE_EVENTRESULT_H
