// Generated by gencpp from file motion/legoTask.msg
// DO NOT EDIT!


#ifndef MOTION_MESSAGE_LEGOTASK_H
#define MOTION_MESSAGE_LEGOTASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion
{
template <class ContainerAllocator>
struct legoTask_
{
  typedef legoTask_<ContainerAllocator> Type;

  legoTask_()
    : command_id(0)
    , send_ack(0)
    , real_robot(0)
    , w_time(0)
    , coord_x(0.0)
    , coord_y(0.0)
    , coord_z(0.0)
    , rot_roll(0.0)
    , rot_pitch(0.0)
    , rot_yaw(0.0)
    , gasp_diam(0.0)
    , dest_x(0.0)
    , dest_y(0.0)
    , dest_z(0.0)
    , dest_roll(0.0)
    , dest_pitch(0.0)
    , dest_yaw(0.0)
    , ungasp_diam(0.0)  {
    }
  legoTask_(const ContainerAllocator& _alloc)
    : command_id(0)
    , send_ack(0)
    , real_robot(0)
    , w_time(0)
    , coord_x(0.0)
    , coord_y(0.0)
    , coord_z(0.0)
    , rot_roll(0.0)
    , rot_pitch(0.0)
    , rot_yaw(0.0)
    , gasp_diam(0.0)
    , dest_x(0.0)
    , dest_y(0.0)
    , dest_z(0.0)
    , dest_roll(0.0)
    , dest_pitch(0.0)
    , dest_yaw(0.0)
    , ungasp_diam(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _command_id_type;
  _command_id_type command_id;

   typedef int32_t _send_ack_type;
  _send_ack_type send_ack;

   typedef int32_t _real_robot_type;
  _real_robot_type real_robot;

   typedef int32_t _w_time_type;
  _w_time_type w_time;

   typedef double _coord_x_type;
  _coord_x_type coord_x;

   typedef double _coord_y_type;
  _coord_y_type coord_y;

   typedef double _coord_z_type;
  _coord_z_type coord_z;

   typedef double _rot_roll_type;
  _rot_roll_type rot_roll;

   typedef double _rot_pitch_type;
  _rot_pitch_type rot_pitch;

   typedef double _rot_yaw_type;
  _rot_yaw_type rot_yaw;

   typedef double _gasp_diam_type;
  _gasp_diam_type gasp_diam;

   typedef double _dest_x_type;
  _dest_x_type dest_x;

   typedef double _dest_y_type;
  _dest_y_type dest_y;

   typedef double _dest_z_type;
  _dest_z_type dest_z;

   typedef double _dest_roll_type;
  _dest_roll_type dest_roll;

   typedef double _dest_pitch_type;
  _dest_pitch_type dest_pitch;

   typedef double _dest_yaw_type;
  _dest_yaw_type dest_yaw;

   typedef double _ungasp_diam_type;
  _ungasp_diam_type ungasp_diam;





  typedef boost::shared_ptr< ::motion::legoTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion::legoTask_<ContainerAllocator> const> ConstPtr;

}; // struct legoTask_

typedef ::motion::legoTask_<std::allocator<void> > legoTask;

typedef boost::shared_ptr< ::motion::legoTask > legoTaskPtr;
typedef boost::shared_ptr< ::motion::legoTask const> legoTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion::legoTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion::legoTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion::legoTask_<ContainerAllocator1> & lhs, const ::motion::legoTask_<ContainerAllocator2> & rhs)
{
  return lhs.command_id == rhs.command_id &&
    lhs.send_ack == rhs.send_ack &&
    lhs.real_robot == rhs.real_robot &&
    lhs.w_time == rhs.w_time &&
    lhs.coord_x == rhs.coord_x &&
    lhs.coord_y == rhs.coord_y &&
    lhs.coord_z == rhs.coord_z &&
    lhs.rot_roll == rhs.rot_roll &&
    lhs.rot_pitch == rhs.rot_pitch &&
    lhs.rot_yaw == rhs.rot_yaw &&
    lhs.gasp_diam == rhs.gasp_diam &&
    lhs.dest_x == rhs.dest_x &&
    lhs.dest_y == rhs.dest_y &&
    lhs.dest_z == rhs.dest_z &&
    lhs.dest_roll == rhs.dest_roll &&
    lhs.dest_pitch == rhs.dest_pitch &&
    lhs.dest_yaw == rhs.dest_yaw &&
    lhs.ungasp_diam == rhs.ungasp_diam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion::legoTask_<ContainerAllocator1> & lhs, const ::motion::legoTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motion::legoTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion::legoTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion::legoTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion::legoTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion::legoTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion::legoTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion::legoTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a4e5c0c91e8ae65724694327df784ce";
  }

  static const char* value(const ::motion::legoTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a4e5c0c91e8ae65ULL;
  static const uint64_t static_value2 = 0x724694327df784ceULL;
};

template<class ContainerAllocator>
struct DataType< ::motion::legoTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion/legoTask";
  }

  static const char* value(const ::motion::legoTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion::legoTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 command_id\n"
"int32 send_ack\n"
"int32 real_robot\n"
"int32 w_time\n"
"float64 coord_x\n"
"float64 coord_y\n"
"float64 coord_z\n"
"float64 rot_roll\n"
"float64 rot_pitch\n"
"float64 rot_yaw\n"
"float64 gasp_diam\n"
"float64 dest_x\n"
"float64 dest_y\n"
"float64 dest_z\n"
"float64 dest_roll\n"
"float64 dest_pitch\n"
"float64 dest_yaw\n"
"float64 ungasp_diam\n"
;
  }

  static const char* value(const ::motion::legoTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion::legoTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command_id);
      stream.next(m.send_ack);
      stream.next(m.real_robot);
      stream.next(m.w_time);
      stream.next(m.coord_x);
      stream.next(m.coord_y);
      stream.next(m.coord_z);
      stream.next(m.rot_roll);
      stream.next(m.rot_pitch);
      stream.next(m.rot_yaw);
      stream.next(m.gasp_diam);
      stream.next(m.dest_x);
      stream.next(m.dest_y);
      stream.next(m.dest_z);
      stream.next(m.dest_roll);
      stream.next(m.dest_pitch);
      stream.next(m.dest_yaw);
      stream.next(m.ungasp_diam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct legoTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion::legoTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion::legoTask_<ContainerAllocator>& v)
  {
    s << indent << "command_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command_id);
    s << indent << "send_ack: ";
    Printer<int32_t>::stream(s, indent + "  ", v.send_ack);
    s << indent << "real_robot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.real_robot);
    s << indent << "w_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.w_time);
    s << indent << "coord_x: ";
    Printer<double>::stream(s, indent + "  ", v.coord_x);
    s << indent << "coord_y: ";
    Printer<double>::stream(s, indent + "  ", v.coord_y);
    s << indent << "coord_z: ";
    Printer<double>::stream(s, indent + "  ", v.coord_z);
    s << indent << "rot_roll: ";
    Printer<double>::stream(s, indent + "  ", v.rot_roll);
    s << indent << "rot_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.rot_pitch);
    s << indent << "rot_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.rot_yaw);
    s << indent << "gasp_diam: ";
    Printer<double>::stream(s, indent + "  ", v.gasp_diam);
    s << indent << "dest_x: ";
    Printer<double>::stream(s, indent + "  ", v.dest_x);
    s << indent << "dest_y: ";
    Printer<double>::stream(s, indent + "  ", v.dest_y);
    s << indent << "dest_z: ";
    Printer<double>::stream(s, indent + "  ", v.dest_z);
    s << indent << "dest_roll: ";
    Printer<double>::stream(s, indent + "  ", v.dest_roll);
    s << indent << "dest_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.dest_pitch);
    s << indent << "dest_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.dest_yaw);
    s << indent << "ungasp_diam: ";
    Printer<double>::stream(s, indent + "  ", v.ungasp_diam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_MESSAGE_LEGOTASK_H
